{
    "/home/anonymous/compare-order/real-project/scylladb/api/storage_service.cc": [
        {
            "header": "bool lambda0",
            "params": "const ss::table_sstables& t1, const ss::table_sstables& t2",
            "is_const": false,
            "body": "return t1.keyspace() < t2.keyspace() || (t1.keyspace() == t2.keyspace() && t1.table() < t2.table());"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/lang/lua.cc": [
        {
            "header": "bool lambda0",
            "params": "const data_value& a, const data_value& b",
            "is_const": false,
            "body": "return element_type->less(a.serialize_nonnull(), b.serialize_nonnull());"
        },
        {
            "header": "bool lambda1",
            "params": "const map_pair& a, const map_pair& b",
            "is_const": false,
            "body": "return key_type->less(a.first.serialize_nonnull(), b.first.serialize_nonnull());"
        },
        {
            "header": "bool lambda2",
            "params": "const table_pair& a, const table_pair& b",
            "is_const": false,
            "body": "return a.first < b.first;"
        },
        {
            "header": "bool lambda3",
            "params": "const table_pair& a, const table_pair& b",
            "is_const": false,
            "body": "return a.first < b.first;"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/service/tablet_allocator.cc": [
        {
            "header": "bool lambda0",
            "params": "const repair_plan& x, const repair_plan& y",
            "is_const": false,
            "body": "return x.repair_time_diff > y.repair_time_diff;"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/db/virtual_tables.cc": [
        {
            "header": "bool lambda0",
            "params": "const decorated_gid& l, const decorated_gid& r",
            "is_const": false,
            "body": "return less(l.key, r.key);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/test/boost/row_cache_test.cc": [
        {
            "header": "bool lambda0",
            "params": "auto& dk1, auto& dk2",
            "is_const": false,
            "body": "return dk1.less_compare(*s, dk2);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/test/boost/mutation_reader_test.cc": [
        {
            "header": "bool lambda0",
            "params": "const auto& pk1, const auto& pk2",
            "is_const": false,
            "body": "return pk1.less_compare(*s.schema(), pk2);"
        },
        {
            "header": "bool lambda1",
            "params": "const auto& pk1, const auto& pk2",
            "is_const": false,
            "body": "return pk1.less_compare(*s.schema(), pk2);"
        },
        {
            "header": "bool lambda2",
            "params": "const mutation_bounds& a, const mutation_bounds& b",
            "is_const": false,
            "body": "return less(a.lower, b.lower);"
        },
        {
            "header": "bool lambda3",
            "params": "const reader_bounds& a, const reader_bounds& b",
            "is_const": false,
            "body": "return less(a.lower, b.lower);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/test/boost/tablets_test.cc": [
        {
            "header": "bool lambda0",
            "params": "const auto& a, const auto& b",
            "is_const": false,
            "body": "return !a.range.start() || b.range.before(a.range.start()->value(), cmp);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/test/boost/cdc_test.cc": [
        {
            "header": "bool lambda0",
            "params": "const std::vector<bytes_opt>& a, const std::vector<bytes_opt>& b",
            "is_const": false,
            "body": "return timeuuid_type->as_less_comparator()(*a[time_index], *b[time_index]);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/test/lib/mutation_source_test.cc": [
        {
            "header": "bool lambda0",
            "params": "auto&& c1, auto&& c2",
            "is_const": false,
            "body": "return timeuuid_type->as_less_comparator()(c1.first, c2.first);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/test/perf/perf.cc": [
        {
            "header": "bool lambda0",
            "params": "const perf_result& a, const perf_result& b",
            "is_const": false,
            "body": "return get_stat(a) < get_stat(b);"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/alternator/streams.cc": [
        {
            "header": "bool lambda0",
            "params": "const data_dictionary::table& t1, const data_dictionary::table& t2",
            "is_const": false,
            "body": "return t1.schema()->id().uuid() < t2.schema()->id().uuid();"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/compaction/incremental_compaction_strategy.cc": [
        {
            "header": "bool lambda0",
            "params": "sstable_run_and_length& i, sstable_run_and_length& j",
            "is_const": false,
            "body": "return i.second < j.second;"
        },
        {
            "header": "bool lambda1",
            "params": "const shared_sstable& a, const shared_sstable& b",
            "is_const": false,
            "body": "return dht::ring_position(a->get_first_decorated_key()).less_compare(*schema, dht::ring_position(b->get_first_decorated_key()));"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/compaction/time_window_compaction_strategy.cc": [
        {
            "header": "bool lambda0",
            "params": "const shared_sstable& a, const shared_sstable& b",
            "is_const": false,
            "body": "return dht::ring_position(a->get_first_decorated_key()).less_compare(*schema, dht::ring_position(b->get_first_decorated_key()));"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/compaction/compaction_manager.cc": [
        {
            "header": "bool lambda0",
            "params": "sstables::shared_sstable& a, sstables::shared_sstable& b",
            "is_const": false,
            "body": "return a->data_size() > b->data_size();"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/compaction/task_manager_module.cc": [
        {
            "header": "bool lambda0",
            "params": "const sstables::foreign_sstable_open_info& a, const sstables::foreign_sstable_open_info& b",
            "is_const": false,
            "body": "return a.uncompressed_data_size > b.uncompressed_data_size;"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/compaction/size_tiered_compaction_strategy.cc": [
        {
            "header": "bool lambda0",
            "params": "auto& i, auto& j",
            "is_const": false,
            "body": "return i.second < j.second;"
        },
        {
            "header": "bool lambda1",
            "params": "const shared_sstable& a, const shared_sstable& b",
            "is_const": false,
            "body": "return dht::ring_position(a->get_first_decorated_key()).less_compare(*schema, dht::ring_position(b->get_first_decorated_key()));"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/compaction/leveled_compaction_strategy.cc": [
        {
            "header": "bool lambda0",
            "params": "const shared_sstable& a, const shared_sstable& b",
            "is_const": false,
            "body": "return dht::ring_position(a->get_first_decorated_key()).less_compare(*schema, dht::ring_position(b->get_first_decorated_key()));"
        }
    ],
    "/home/anonymous/compare-order/real-project/scylladb/repair/row_level.cc": [
        {
            "header": "bool lambda0",
            "params": "const auto& a, const auto& b",
            "is_const": false,
            "body": "return this->_cmp(a, b) < 0;"
        }
    ]
}