{
    "/home/lizhilin/compare-order/real-project/gdal/alg/gdalwarpoperation.cpp": [
        {
            "header": "bool lambda0",
            "params": "const GDALWarpChunk &a, const GDALWarpChunk &b",
            "is_const": false,
            "body": "if (a.dy < b.dy)\n                          return true;\n                      if (a.dy > b.dy)\n                          return false;\n                      return a.dx < b.dx;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/port/cpl_vsil.cpp": [
        {
            "header": "bool lambda0",
            "params": "const std::string &a, const std::string &b",
            "is_const": false,
            "body": "return a > b;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/port/cplstringlist.cpp": [
        {
            "header": "bool lambda0",
            "params": "const char *a, const char *b",
            "is_const": false,
            "body": "return CPLCompareKeyValueString(a, b) < 0;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/frmts/gti/gdaltileindexdataset.cpp": [
        {
            "header": "bool lambda0",
            "params": "const SourceDesc &a, const SourceDesc &b",
            "is_const": false,
            "body": "const auto &poFeatureA = (m_bSortFieldAsc ? a : b).poFeature;\n            const auto &poFeatureB = (m_bSortFieldAsc ? b : a).poFeature;\n            if (m_nSortFieldIndex >= 0 &&\n                poFeatureA->IsFieldSetAndNotNull(m_nSortFieldIndex) &&\n                poFeatureB->IsFieldSetAndNotNull(m_nSortFieldIndex))\n            {\n                if (eFieldType == OFTString)\n                {\n                    const int nCmp =\n                        strcmp(poFeatureA->GetFieldAsString(m_nSortFieldIndex),\n                               poFeatureB->GetFieldAsString(m_nSortFieldIndex));\n                    if (nCmp < 0)\n                        return true;\n                    if (nCmp > 0)\n                        return false;\n                }\n                else if (eFieldType == OFTInteger || eFieldType == OFTInteger64)\n                {\n                    const auto nA =\n                        poFeatureA->GetFieldAsInteger64(m_nSortFieldIndex);\n                    const auto nB =\n                        poFeatureB->GetFieldAsInteger64(m_nSortFieldIndex);\n                    if (nA < nB)\n                        return true;\n                    if (nA > nB)\n                        return false;\n                }\n                else if (eFieldType == OFTReal)\n                {\n                    const auto dfA =\n                        poFeatureA->GetFieldAsDouble(m_nSortFieldIndex);\n                    const auto dfB =\n                        poFeatureB->GetFieldAsDouble(m_nSortFieldIndex);\n                    if (dfA < dfB)\n                        return true;\n                    if (dfA > dfB)\n                        return false;\n                }\n                else if (eFieldType == OFTDate || eFieldType == OFTDateTime)\n                {\n                    const auto poFieldA =\n                        poFeatureA->GetRawFieldRef(m_nSortFieldIndex);\n                    const auto poFieldB =\n                        poFeatureB->GetRawFieldRef(m_nSortFieldIndex);\n\n#define COMPARE_DATE_COMPONENT(comp)                                           \\\n    do                                                                         \\\n    {                                                                          \\\n        if (poFieldA->Date.comp < poFieldB->Date.comp)                         \\\n            return true;                                                       \\\n        if (poFieldA->Date.comp > poFieldB->Date.comp)                         \\\n            return false;                                                      \\\n    } while (0)\n\n                    COMPARE_DATE_COMPONENT(Year);\n                    COMPARE_DATE_COMPONENT(Month);\n                    COMPARE_DATE_COMPONENT(Day);\n                    COMPARE_DATE_COMPONENT(Hour);\n                    COMPARE_DATE_COMPONENT(Minute);\n                    COMPARE_DATE_COMPONENT(Second);\n                }\n                else\n                {\n                    CPLAssert(false);\n                }\n            }\n            return poFeatureA->GetFID() < poFeatureB->GetFID();"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/frmts/ogcapi/gdalogcapidataset.cpp": [
        {
            "header": "bool lambda0",
            "params": "const gdal::TileMatrixSet::TileMatrix::\n                                 VariableMatrixWidth &a,\n                             const gdal::TileMatrixSet::TileMatrix::\n                                 VariableMatrixWidth &b",
            "is_const": false,
            "body": "return a.mMinTileRow < b.mMinTileRow;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/frmts/hdf5/bagdataset.cpp": [
        {
            "header": "bool lambda0",
            "params": "int i1, int i2",
            "is_const": false,
            "body": "return SQ(adfX[i1] - dfX) + SQ(adfY[i1] - dfY) <\n                                   SQ(adfX[i2] - dfX) + SQ(adfY[i2] - dfY);"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/frmts/pdf/pdfdataset.cpp": [
        {
            "header": "bool lambda0",
            "params": "const LayerStruct &a, const LayerStruct &b",
            "is_const": false,
            "body": "if (a.iPage < b.iPage)\n                      return true;\n                  if (a.iPage > b.iPage)\n                      return false;\n                  return a.nInsertIdx < b.nInsertIdx;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/frmts/stacit/stacitdataset.cpp": [
        {
            "header": "bool lambda0",
            "params": "const AssetItem &a, const AssetItem &b",
            "is_const": false,
            "body": "if (!a.osDateTime.empty() && !b.osDateTime.empty())\n                      return a.osDateTime < b.osDateTime;\n                  return &a < &b;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/apps/gdalwarp_lib.cpp": [
        {
            "header": "bool lambda0",
            "params": "const std::pair<double, double> &oPair1,\n                         const std::pair<double, double> &oPair2",
            "is_const": false,
            "body": "return oPair1.first < oPair2.first;"
        },
        {
            "header": "bool lambda1",
            "params": "const std::pair<double, double> &oPair1,\n                             const std::pair<double, double> &oPair2",
            "is_const": false,
            "body": "return oPair1.second < oPair2.second;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/apps/argparse/argparse.hpp": [
        {
            "header": "bool lambda0",
            "params": "const auto &lhs, const auto &rhs",
            "is_const": false,
            "body": "return lhs.size() == rhs.size() ? lhs < rhs : lhs.size() < rhs.size();"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/third_party/LercLib/Huffman.cpp": [
        {
            "header": "bool lambda0",
            "params": "const pair<int, unsigned int>& p0,\n       const pair<int, unsigned int>& p1",
            "is_const": false,
            "body": "return p0.first > p1.first;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/third_party/LercLib/Lerc2.cpp": [
        {
            "header": "bool lambda0",
            "params": "const pair<unsigned int, unsigned int>& p0,\n       const pair<unsigned int, unsigned int>& p1",
            "is_const": false,
            "body": "return p0.first < p1.first;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/gml/gmlhandler.cpp": [
        {
            "header": "bool lambda0",
            "params": "const GeometryNamesStruct &a, const GeometryNamesStruct &b",
            "is_const": false,
            "body": "return a.nHash < b.nHash;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.h": [
        {
            "header": "bool lambda0",
            "params": "const ITEM_TYPE &a, const ITEM_TYPE &b",
            "is_const": false,
            "body": "uint32_t ha =\n                hilbert(a.nodeItem, HILBERT_MAX, minX, minY, width, height);\n            uint32_t hb =\n                hilbert(b.nodeItem, HILBERT_MAX, minX, minY, width, height);\n            return ha > hb;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/flatgeobuf/ogrflatgeobuflayer.cpp": [
        {
            "header": "bool lambda0",
            "params": "const BatchItem &a, const BatchItem &b",
            "is_const": false,
            "body": "return m_featureItems[a.featureIdx].offset <\n                                 m_featureItems[b.featureIdx].offset;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/flatgeobuf/packedrtree.cpp": [
        {
            "header": "bool lambda0",
            "params": "std::shared_ptr<Item> a,\n                                          std::shared_ptr<Item> b",
            "is_const": false,
            "body": "uint32_t ha = hilbert(a->nodeItem, HILBERT_MAX, minX, minY,\n                                        width, height);\n                  uint32_t hb = hilbert(b->nodeItem, HILBERT_MAX, minX, minY,\n                                        width, height);\n                  return ha > hb;"
        },
        {
            "header": "bool lambda1",
            "params": "const NodeItem &a, const NodeItem &b",
            "is_const": false,
            "body": "uint32_t ha =\n                      hilbert(a, HILBERT_MAX, minX, minY, width, height);\n                  uint32_t hb =\n                      hilbert(b, HILBERT_MAX, minX, minY, width, height);\n                  return ha > hb;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/openfilegdb/filegdbindex_write.cpp": [
        {
            "header": "bool lambda0",
            "params": "const ValueOIDPair &a, const ValueOIDPair &b",
            "is_const": false,
            "body": "return a.first < b.first ||\n                         (a.first == b.first && a.second < b.second);"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/pmtiles/ogrpmtilesfrommbtiles.cpp": [
        {
            "header": "bool lambda0",
            "params": "const TileEntry &a, const TileEntry &b",
            "is_const": false,
            "body": "return a.nTileId < b.nTileId;"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/sqlite/sqlite_rtree_bulk_load/sqlite_rtree_bulk_load.c": [
        {
            "header": "bool lambda0",
            "params": "const SortType& a, const SortType& b",
            "is_const": false,
            "body": "return nodeOri.rects[a.i].min[0] < nodeOri.rects[b.i].min[0] ||\n               (nodeOri.rects[a.i].min[0] == nodeOri.rects[b.i].min[0] &&\n                nodeOri.rects[a.i].max[0] < nodeOri.rects[b.i].max[0]);"
        },
        {
            "header": "bool lambda1",
            "params": "const SortType& a, const SortType& b",
            "is_const": false,
            "body": "return nodeOri.rects[a.i].min[1] < nodeOri.rects[b.i].min[1] ||\n               (nodeOri.rects[a.i].min[1] == nodeOri.rects[b.i].min[1] &&\n                nodeOri.rects[a.i].max[1] < nodeOri.rects[b.i].max[1]);"
        }
    ],
    "/home/lizhilin/compare-order/real-project/gdal/ogr/ogrsf_frmts/shape/ogrshapedatasource.cpp": [
        {
            "header": "bool lambda0",
            "params": "const CPLString &a, const CPLString &b",
            "is_const": false,
            "body": "int iA = INT_MAX;\n                  auto oIterA =\n                      oMapLayerOrder.find(CPLGetBasenameSafe(a).c_str());\n                  if (oIterA != oMapLayerOrder.end())\n                      iA = oIterA->second;\n                  int iB = INT_MAX;\n                  auto oIterB =\n                      oMapLayerOrder.find(CPLGetBasenameSafe(b).c_str());\n                  if (oIterB != oMapLayerOrder.end())\n                      iB = oIterB->second;\n                  if (iA < iB)\n                      return true;\n                  if (iA > iB)\n                      return false;\n                  if (iA != INT_MAX)\n                  {\n                      if (EQUAL(CPLGetExtensionSafe(a).c_str(), \"shp\"))\n                          return true;\n                      if (EQUAL(CPLGetExtensionSafe(b).c_str(), \"shp\"))\n                          return false;\n                  }\n                  return a < b;"
        }
    ]
}