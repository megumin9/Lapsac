test_1.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_1.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_1.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_1.cpp:17:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x = strlen(a->var4);
      ^
test_1.cpp:18:7: style: The scope of the variable 'y' can be reduced. [variableScope]
  int y = strlen(b->var4);
      ^
test_1.cpp:33:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_1.cpp:39:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_1.cpp:45:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_1.cpp:51:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_1.cpp:57:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_1.cpp:16:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_1.cpp:16:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_10.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_10.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_10.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_10.cpp:27:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_10.cpp:33:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_10.cpp:39:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_10.cpp:45:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_10.cpp:51:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_10.cpp:18:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_10.cpp:18:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_11.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_11.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_11.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_11.cpp:26:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_11.cpp:32:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_11.cpp:38:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_11.cpp:44:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_11.cpp:50:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_11.cpp:16:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_11.cpp:16:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_12.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_12.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_12.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_12.cpp:28:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_12.cpp:34:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_12.cpp:40:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_12.cpp:46:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_12.cpp:52:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_13.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_13.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_13.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_13.cpp:23:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_13.cpp:29:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_13.cpp:35:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_13.cpp:41:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_13.cpp:47:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_13.cpp:16:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_13.cpp:16:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_14.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_14.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_14.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_14.cpp:31:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_14.cpp:37:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_14.cpp:43:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_14.cpp:49:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_14.cpp:55:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_14.cpp:18:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_14.cpp:18:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_15.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_15.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_15.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_15.cpp:20:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_15.cpp:26:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_15.cpp:32:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_15.cpp:38:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_15.cpp:44:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_15.cpp:13:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_15.cpp:13:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_16.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_16.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_16.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_16.cpp:4:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_16.cpp:25:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_16.cpp:31:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_16.cpp:37:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_16.cpp:43:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_16.cpp:49:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_16.cpp:16:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_16.cpp:16:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_17.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_17.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_17.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_17.cpp:30:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_17.cpp:36:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_17.cpp:42:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_17.cpp:48:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_17.cpp:54:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_18.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_18.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_18.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_18.cpp:29:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_18.cpp:35:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_18.cpp:41:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_18.cpp:47:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_18.cpp:53:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_18.cpp:16:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_18.cpp:16:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_19.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_19.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_19.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_19.cpp:18:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_19.cpp:24:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_19.cpp:30:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_19.cpp:36:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_19.cpp:42:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_19.cpp:11:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_19.cpp:11:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_2.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_2.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_2.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_2.cpp:30:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_2.cpp:36:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_2.cpp:42:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_2.cpp:48:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_2.cpp:54:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_20.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_20.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_20.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_20.cpp:4:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_20.cpp:23:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_20.cpp:29:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_20.cpp:35:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_20.cpp:41:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_20.cpp:47:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_20.cpp:16:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a,testclass *b) {
                    ^
test_20.cpp:16:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a,testclass *b) {
                                 ^
test_21.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_21.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_21.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_21.cpp:19:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x = strlen(a->var4);
      ^
test_21.cpp:20:7: style: The scope of the variable 'y' can be reduced. [variableScope]
  int y = strlen(b->var4);
      ^
test_21.cpp:39:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_21.cpp:45:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_21.cpp:51:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_21.cpp:57:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_21.cpp:63:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_21.cpp:18:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_21.cpp:18:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_22.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_22.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_22.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_22.cpp:35:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_22.cpp:41:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_22.cpp:47:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_22.cpp:53:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_22.cpp:59:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_23.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_23.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_23.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_23.cpp:33:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_23.cpp:39:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_23.cpp:45:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_23.cpp:51:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_23.cpp:57:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_23.cpp:15:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a,testclass *b) {
                   ^
test_23.cpp:15:33: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a,testclass *b) {
                                ^
test_24.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_24.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_24.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_24.cpp:31:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_24.cpp:37:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_24.cpp:43:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_24.cpp:49:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_24.cpp:55:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_24.cpp:17:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_24.cpp:17:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_25.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_25.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_25.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_25.cpp:36:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_25.cpp:42:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_25.cpp:48:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_25.cpp:54:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_25.cpp:60:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_25.cpp:18:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a,testclass *b) {
                   ^
test_25.cpp:18:33: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a,testclass *b) {
                                ^
test_26.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_26.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_26.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_26.cpp:19:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x = strlen(a->var4);
      ^
test_26.cpp:20:7: style: The scope of the variable 'y' can be reduced. [variableScope]
  int y = strlen(b->var4);
      ^
test_26.cpp:31:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_26.cpp:37:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_26.cpp:43:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_26.cpp:49:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_26.cpp:55:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_26.cpp:18:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_26.cpp:18:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_27.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_27.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_27.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_27.cpp:27:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_27.cpp:33:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_27.cpp:39:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_27.cpp:45:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_28.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_28.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_28.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_28.cpp:28:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_28.cpp:34:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_28.cpp:40:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_28.cpp:46:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_28.cpp:52:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_28.cpp:18:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_28.cpp:18:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_29.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_29.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_29.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_29.cpp:26:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_29.cpp:32:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_29.cpp:38:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_29.cpp:44:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_29.cpp:50:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_29.cpp:17:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_29.cpp:17:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_3.cpp:2:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_3.cpp:3:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_3.cpp:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_3.cpp:30:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_3.cpp:36:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_3.cpp:42:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_3.cpp:48:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_3.cpp:54:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_3.cpp:17:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_3.cpp:17:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_30.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_30.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_30.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_30.cpp:24:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_30.cpp:30:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_30.cpp:36:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_30.cpp:42:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_30.cpp:48:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_30.cpp:15:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_30.cpp:15:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_31.cpp:1:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_31.cpp:27:15: style: Condition 'a->var1<b->var1' is always false [knownConditionTrueFalse]
  if (a->var1 < b->var1)
              ^
test_31.cpp:21:15: note: Assuming that condition 'a->var1<b->var1' is not redundant
  if (a->var1 < b->var1)
              ^
test_31.cpp:24:9: note: Assuming condition is false
  if (x > y)
        ^
test_31.cpp:27:15: note: Condition 'a->var1<b->var1' is always false
  if (a->var1 < b->var1)
              ^
test_31.cpp:36:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_31.cpp:42:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_31.cpp:48:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_31.cpp:54:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_31.cpp:60:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_31.cpp:14:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_31.cpp:14:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_32.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_32.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_32.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_32.cpp:36:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_32.cpp:42:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_32.cpp:48:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_32.cpp:54:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_32.cpp:60:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_33.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_33.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_33.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_33.cpp:33:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_33.cpp:39:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_33.cpp:45:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_33.cpp:51:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_33.cpp:57:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_33.cpp:14:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_33.cpp:14:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_34.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_34.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_34.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_34.cpp:35:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_34.cpp:41:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_34.cpp:47:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_34.cpp:53:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_34.cpp:59:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_34.cpp:16:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a,testclass *b) {
                   ^
test_34.cpp:16:33: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a,testclass *b) {
                                ^
test_35.cpp:2:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_35.cpp:3:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_35.cpp:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_35.cpp:36:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_35.cpp:42:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_35.cpp:48:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_35.cpp:54:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_35.cpp:60:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_35.cpp:17:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_35.cpp:17:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_36.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_36.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_36.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_36.cpp:4:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_36.cpp:33:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_36.cpp:39:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_36.cpp:45:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_36.cpp:51:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_36.cpp:57:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_36.cpp:17:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_36.cpp:17:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_37.cpp:2:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_37.cpp:3:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_37.cpp:4:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_37.cpp:26:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_37.cpp:32:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_37.cpp:38:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_37.cpp:44:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_37.cpp:50:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_37.cpp:17:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_37.cpp:17:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_38.cpp:1:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
test_38.cpp:27:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_38.cpp:33:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_38.cpp:39:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_38.cpp:45:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_38.cpp:51:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_39.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_39.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_39.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_39.cpp:26:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_39.cpp:32:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_39.cpp:38:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_39.cpp:44:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_39.cpp:50:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_39.cpp:15:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_39.cpp:15:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_4.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_4.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_4.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_4.cpp:29:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_4.cpp:35:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_4.cpp:41:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_4.cpp:47:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_4.cpp:53:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_4.cpp:16:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_4.cpp:16:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_40.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_40.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_40.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_40.cpp:26:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_40.cpp:32:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_40.cpp:38:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_40.cpp:44:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_40.cpp:50:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_40.cpp:15:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_40.cpp:15:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_5.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_5.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_5.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_5.cpp:23:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_5.cpp:29:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_5.cpp:35:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_5.cpp:41:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_5.cpp:47:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_5.cpp:14:20: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                   ^
test_5.cpp:14:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int cmp(testclass *a, testclass *b) {
                                 ^
test_6.cpp:1:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_6.cpp:15:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x = strlen(a->var4);
      ^
test_6.cpp:16:7: style: The scope of the variable 'y' can be reduced. [variableScope]
  int y = strlen(b->var4);
      ^
test_6.cpp:27:2: error: Division by zero. [zerodiv]
4/0;
 ^
test_6.cpp:33:2: error: Division by zero. [zerodiv]
3/0;
 ^
test_6.cpp:39:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_6.cpp:45:2: error: Division by zero. [zerodiv]
2/0;
 ^
test_6.cpp:51:2: error: Division by zero. [zerodiv]
1/0;
 ^
test_6.cpp:14:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_6.cpp:14:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_7.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_7.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_7.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_7.cpp:25:10: error: Division by zero. [zerodiv]
        4/0;
         ^
test_7.cpp:31:10: error: Division by zero. [zerodiv]
        3/0;
         ^
test_7.cpp:37:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_7.cpp:43:10: error: Division by zero. [zerodiv]
        2/0;
         ^
test_7.cpp:49:10: error: Division by zero. [zerodiv]
        1/0;
         ^
test_8.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
test_8.cpp:2:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_8.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
test_8.cpp:26:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_8.cpp:32:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_8.cpp:38:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_8.cpp:44:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_8.cpp:50:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_8.cpp:17:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_8.cpp:17:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_9.cpp:1:0: information: Include file: <cstring> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstring>
^
test_9.cpp:24:6: error: Division by zero. [zerodiv]
    4/0;
     ^
test_9.cpp:30:6: error: Division by zero. [zerodiv]
    3/0;
     ^
test_9.cpp:36:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_9.cpp:42:6: error: Division by zero. [zerodiv]
    2/0;
     ^
test_9.cpp:48:6: error: Division by zero. [zerodiv]
    1/0;
     ^
test_9.cpp:14:21: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                    ^
test_9.cpp:14:35: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
bool cmp(testclass *a, testclass *b) {
                                  ^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_10.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
class testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_11.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_12.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_13.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_14.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_15.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_16.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_17.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
class testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_18.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_19.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass { int var1; };
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_2.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_20.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_21.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_22.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_23.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_24.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_25.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_26.cpp:12:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_27.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_28.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_29.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_3.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_30.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_31.cpp:3:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_32.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_33.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_34.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_35.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_36.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_37.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_38.cpp:3:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_39.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_4.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_40.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_5.cpp:4:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_7.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_8.cpp:6:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: error: The one definition rule is violated, different classes/structs have the same name 'testclass' [ctuOneDefinitionRuleViolation]
struct testclass {
^
test_9.cpp:3:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:5:1: note: The one definition rule is violated, different classes/structs have the same name 'testclass'
struct testclass {
^
test_1.cpp:30:0: style: The function 'test1' is never used. [unusedFunction]
void test1(testclass *a, testclass *b, testclass *c){
^
test_1.cpp:36:0: style: The function 'test2' is never used. [unusedFunction]
void test2(testclass *a, testclass *b, testclass *c){
^
test_1.cpp:42:0: style: The function 'test3_1' is never used. [unusedFunction]
void test3_1(testclass *a,testclass *b){
^
test_1.cpp:48:0: style: The function 'test3_2' is never used. [unusedFunction]
void test3_2(testclass *a,testclass *b){
^
test_1.cpp:54:0: style: The function 'test4' is never used. [unusedFunction]
void test4(testclass *a){
^
nofile:0:0: information: Active checkers: 167/856 (use --checkers-report=<filename> to see details) [checkersReport]

